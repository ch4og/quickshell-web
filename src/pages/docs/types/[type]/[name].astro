---
import { getQMLTypeLink } from "@config/io/helpers";
import { processMarkdown } from "@config/io/markdown";
import { getTypeData } from "@config/io/generateTypeData";
import DocsLayout from "@layouts/DocsLayout.astro";
import TOC from "@components/navigation/sidebars/TOC.astro";
import Properties from "@components/type/Properties.astro";
import Functions from "@components/type/Functions.astro";
import Signals from "@components/type/Signals.astro";
import Variants from "@components/type/Variants.astro";
import Badge from "@components/Badge.astro";

export async function getStaticPaths() {
  const routes = await getTypeData();

  return routes
    .filter(route => route.name !== "index")
    .map(route => ({
      params: { type: route.type, name: route.name },
      props: { route },
    }));
}

const { route } = Astro.props;

const data = route.data;

const sidebarFunctions =
  data.functions?.map(item => item.name) || null;

const propsKeys = data.properties
  ? Object.keys(data.properties).toSorted()
  : null;
const signalKeys = data.signals
  ? Object.keys(data.signals).toSorted()
  : null;
const variantKeys = data.variants
  ? Object.keys(data.variants).toSorted()
  : null;

const sidebarData = {
  properties: propsKeys,
  functions: sidebarFunctions,
  signals: signalKeys,
  variants: variantKeys,
};

const superLink = data.super ? getQMLTypeLink(data.super) : null;

const details = data.details
  ? await processMarkdown(data.details)
  : null;
---
<DocsLayout title={`${route.name} - ${route.type}`} description={data?.description ?? ""}>
  <div class="docs">
    <div class="docs-content typedocs-content">
      <hr />
      <section class="typedocs-title">
      <h2 class="typedocs-title-text" data-pagefind-weight="10">
        {route.name}:
          {data.super?.name ? (
            <a
              href={superLink!}
              data-pagefind-ignore
            >
            {data.super.name}
            </a>
          ):(
            <span class="type-datatype" data-pagefind-ignore>{data.type}</span>
          )
          }
      </h2>
      {data && data.flags ? (
        <div class="type-flags" data-pagefind-ignore>{data.flags.map(flag => (
          <Badge badgeText={flag}/>
        ))}</div>
      ):null}
      </section>
      <code class="type-module" data-pagefind-ignore>import {data.module}</code>
      {
        route && data ? (
          <section class="typedocs-data typedata">
            <subheading class="typedocs-subheading">
              {details ? <span class="parsedMD" set:html={details}/> : (<span class="toparse">{data.description}</span>)}
            </subheading>
            { data.properties && propsKeys && propsKeys.length > 0 && (
              <h2>Properties <a href="/docs/guide/qml-language#properties">[?]</a></h2>
              <Properties
                propsData={data.properties}
                propsKeys={propsKeys!}
              />
            )}
            { data.functions && data.functions.length > 0 && (
              <h2>Functions <a href="/docs/guide/qml-language#functions">[?]</a></h2>
              <Functions
                funcData={data.functions}
              />
            )}
            { data.signals && signalKeys && signalKeys.length > 0 && (
              <h2>Signals <a href="/docs/guide/qml-language#signals">[?]</a></h2>
              <Signals
                signalsData={data.signals}
                signalKeys={signalKeys}
              />
            )}
            { data.variants && variantKeys && variantKeys.length > 0 && (
              <h2>Variants</h2>
              <Variants
                variantsData={data.variants}
                variantKeys={variantKeys}
              />
            )}
          </section>
        ) : null
      }
    </div>
    <TOC mobile={false} types={sidebarData} data-pagefind-ignore/>
  </div>
</DocsLayout>

